# This script is part of the vieweach CPrAN plugin for Praat.
# The latest version is available through CPrAN or at
# <http://cpran.net/plugins/vieweach>
#
# The vieweach plugin is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
#
# The vieweach plugin is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with vieweach. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2015 Jose Joaquin Atria

include ../../plugin_selection/procedures/selection.proc

preferencesDirectory$ = replace_regex$(preferencesDirectory$, "(con)?(\.(EXE|exe))?$", "", 0)

#
# Hooks
#

# Called as the last thing that happens before entering the main loop
procedure for_each.before_iteration ()
endproc

# Called after the iteration has started, after the index of the current
# iteration has been stored in for_each.item
procedure for_each.at_begin_iteration ()
endproc

# Main action procedure
# Called once per iteration, this holds the entire iteration logic
procedure for_each.action ()
endproc

# Called as the last thing before the new iteration index is calculated
# at the end of the main loop. This is the last chance to chance the value of
# for_ecah.next to alter the next value of for_each.index
procedure for_each.at_end_iteration ()
endproc

# Called as the last thing before the selection table with the sets is removed
procedure for_each.finally ()
  selectObject: for_each.sets
  runScript: for_each.selection_scripts$ +
    ... "restore_selection.praat"
endproc

# Main procedure
#
procedure for_each ()
  .selection_scripts$ = preferencesDirectory$ + "/plugin_selection/scripts/"

  .total_sets = numberOfSelected("Table") + numberOfSelected("Strings")

  if .total_sets
    runScript: .selection_scripts$ + "save_selection.praat"
    .sets = selected("Table")
    Rename: "foreach_sets"

    # Calculate the index number of the last iteration
    .max_items = 0
    for .set to .total_sets
      selectObject: Object_'.sets'[.set, "id"]
      .type$ = Object_'.sets'$[.set, "type"]
      .items = do("Get number of " +
        ... if .type$ = "Table" then "rows" else "strings" fi)
      .max_items = if .items > .max_items then .items else .max_items fi
    endfor
    .last = .max_items
    .total_items = .last       ; For backwards compatibility

    # Clear selection
    nocheck selectObject: undefined

    # Set initial value for index
    if !variableExists("for_each.start_from")
      .start_from = 1
    endif
    .start_from = if .start_from = undefined then 1 else .start_from fi
    .current = .start_from
    .item = .current           ; For backwards compatibility
    .next = 1

    @for_each.before_iteration()
    # Iterate
    while .current > 0 and .current <= .total_items
      .item = .current         ; For backwards compatibility
      @for_each.at_begin_iteration()

      # Make two empty selection tables to hold the selection of the current
      # iteration, and any newly created objects that need to be removed at the
      # end of the current iteration
      @createEmptySelectionTable()
      .selection = createEmptySelectionTable.table
      selectObject: .selection
      Rename: "foreach_selection"

      @createEmptySelectionTable()
      .remove = createEmptySelectionTable.table
      selectObject: .remove
      Rename: "foreach_remove"

      # Populate the selection table for the current selection
      @for_each._select()

      selectObject: .selection
      runScript: .selection_scripts$ + "restore_selection.praat"

      # Perform the main action
      @for_each.action()


      # Remove any temporary objects as well as the selection tables
      selectObject: .remove
      runScript: .selection_scripts$ + "restore_selection.praat"
      nocheck Remove
      removeObject: .selection, .remove

      @for_each.at_end_iteration()

      # Specify the value of the next index. If predefining this procedure,
      # setting an appropriate value for this variable is essential.
      #  1 = Move to next iteration
      # -1 = Move to previous iteration
      #  0 = Stop iteration
      if !.next
        .current += .last
      else
        .current += .next
      endif

    endwhile

    @for_each.finally()
    # Remove the final selection table, holding the IDs of the initial sets
    removeObject: .sets

  endif
endproc

# Make the selection for the appropriate for the current iteration
# The selection will be stored in for_each.selection
procedure for_each._select ()
  # One current object needs to be selected per set
  # Sets are either Tables (with objects in the Objects list) or Strings
  # (pointing to the file system)
  for .s to for_each.total_sets
    .set = Object_'for_each.sets'[.s, "id"]
    .type$ = Object_'for_each.sets'$[.s, "type"]
    selectObject: .set
    .items = do("Get number of " +
      ... if .type$ = "Table" then "rows" else "strings" fi)

    # Make sure sets can be of variable length
    .i = ((for_each.current - 1) mod .items) + 1

    if .type$ = "Table"
      .id = Object_'.set'[.i, "id"]
    else
      selectObject: .set
      .name$ = Get string: .i
      # If string looks like name of a directory, do not try to open as file
      # Instead create a Strings with the list of files in the directory
      if right$(.name$) == "/" or right$(.name$) == "\"
        runScript: preferencesDirectory$ + "/plugin_strutils/scripts/" +
          ... "directory_list_full_path.praat", .name$, .name$, "*", "no"
        .dirs = selected("Strings")
        runScript: preferencesDirectory$ + "/plugin_strutils/scripts/" +
          ... "file_list_full_path.praat", .name$, .name$, "*", "no"
        .files = selected("Strings")
        selectObject: .dirs, .files
        .id = Append
        .n$ = replace_regex$(.name$, "\\", "/", 0)
        Rename: replace_regex$(.n$, ".*/([^/]+)/", "\1", 0)
        removeObject: .dirs, .files
      else
        .id = Read from file: .name$
      endif

      # IDs of new objects are saved for later removal
      @addToSelectionTable: for_each.remove, .id
    endif
    # for_each.selection holds the selection for the current iteration
    @addToSelectionTable: for_each.selection, .id
  endfor
endproc

# Cleanly interrupt the iterator
# Make sure to remove all the temporary objects that are active during
# iteration.
procedure for_each.clean_exit (.message$)
  nocheck removeObject: for_each.sets
  nocheck removeObject: for_each.selection
  nocheck removeObject: for_each.remove
  exitScript: .message$ + newline$
endproc
